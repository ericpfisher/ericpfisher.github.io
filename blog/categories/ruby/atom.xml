<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Ruby | Fish(er)]]></title>
  <link href="http://ericpfisher.github.io/blog/categories/ruby/atom.xml" rel="self"/>
  <link href="http://ericpfisher.github.io/"/>
  <updated>2014-06-17T16:13:16-05:00</updated>
  <id>http://ericpfisher.github.io/</id>
  <author>
    <name><![CDATA[Eric Fisher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Moar Railz]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/05/22/moar-railz/"/>
    <updated>2014-05-22T11:52:24-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/05/22/moar-railz</id>
    <content type="html"><![CDATA[<h4>Chapter 13: Static Pages and Routing</h4>

<p>TIL (Today, I learned): Rails uses the pages in the <code>public</code> directory as the default pages.  If you have an <code>index.html</code> in your <code>public</code> folder, chances are Rails will display that by default.  This is Web Server 101.</p>

<p>What I <strong><em>didn&rsquo;t</em></strong> know was that configuring routing is as easy as changing a little file called <code>config/routes.rb</code>.  The file determines routing paths for the Rails application itself.  Without diving too deep, and using my limited knowledge, let me make deductions from the following code snippet:</p>

<p><code>ruby routes.rb
LearnRails::Application.routes.draw do
  root to: redirect('/about.html')
end
</code></p>

<p>Takeaways:</p>

<ul>
<li><p>  <code>LearnRails</code> matches the application naming of <code>learn-rails</code> when I ran <code>rails new learn-rails</code>. The application is an object itself, and by method-chaining <code>Application.routes.draw</code>, I re-configured the application to redirect the <code>root</code> path to <code>/about.html</code>.</p></li>
<li><p>  The <code>do/end</code> block is kind of like a <em>for</em> loop.  However, it looks like with this loop, it merely declares what the routing should be. I wonder if multiple routes can be specified in this routing config file.</p></li>
</ul>


<h4>Chapter 14: Request and Response</h4>

<p>This chapter covers two things:</p>

<ol>
<li> A simplified look at the exchange between web browser and web server.</li>
<li> The basics of the <a href="http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller">model-view-controller</a> paradigm for programming.</li>
</ol>


<p>1&hellip;For the first subject, I just verified things I had already learned when I built the Loaner Checkout system (see git repo on the right of the page). Being already familiar with the HTTP request methods GET and POST, I grasped this concept easily:</p>

<blockquote><p><em>Web browsers request documents from a web server, and the web server responds with either the requested content or an error explaning why the request could not be completed.</em></p></blockquote>

<p>So, in a nutshell, it&rsquo;s like you&rsquo;re opening a Word document on your computer&hellip;but you&rsquo;re getting the documents from a server somewhere on the interwebs&hellip;and your browser is the &ldquo;application&rdquo; that understands how to open/render HTML documents (plus CSS, JavaScript, etc.).  Pretty straightforward.</p>

<p>After the request has been completed, a &ldquo;DOM Ready&rdquo; event fires in the browser, passing control to client-side technologies for execution, e.g. JavaScript, jQuery, AJAX, etc.</p>

<p>2&hellip;MVC, taken from <a href="http://en.wikipedia.org/wiki/Model%E2%80%93View%E2%80%93Controller">Wikipedia</a>:</p>

<blockquote><ul>
<li> A <strong>controller</strong> can send commands to the model to update the model&rsquo;s state (e.g. editing a document).  It can also send commands to its associated view to change the view&rsquo;s presentation of the model (e.g. by scrolling through a document).</li>
<li> A <strong>model</strong> notifies its associated views and controllers when there has been a change in its state.  This notification allows the views to produce updated output, and the controllers to change the available set of commands.  In some cases an MVC implementation might instead be &ldquo;passive,&rdquo; so that other components must poll the model for updates rather than being notified.</li>
<li> A <strong>view</strong> requests information from the model that it needs for generating an output representation to the user.</li>
</ul>
</blockquote>

<p>Prior to the controller, a request gets passed to the Rails application router (<code>config/routes.rb</code>). The router (file) determines which controller handles the request.</p>

<p>The controller then interacts with the models (data) and the views (layout) and responds to the request by combining elements received from both.  Here&rsquo;s a simple example:</p>

<ol>
<li> I log into a web page. At the top of the page, I see &ldquo;Welcome, Eric.&rdquo;</li>
<li> When I logged in, the controller commanded the model to update &ldquo;Welcome, .&rdquo; to &ldquo;Welcome, Eric.&rdquo;</li>
<li> The model notifies the view that it should display &ldquo;Welcome, Eric.&rdquo; and generates the HTML content to be rendered on my computer screen.</li>
</ol>


<p>This is a really simplified version of MVC cycle, and it&rsquo;s possibly incomplete.  I understand the general theory, but knowing exactly which component does what is something I&rsquo;m still learning.  For more information, check out the Wikipedia article I linked earlier in the post (twice!).</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Learning Rails]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/05/20/learning-rails/"/>
    <updated>2014-05-20T09:42:05-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/05/20/learning-rails</id>
    <content type="html"><![CDATA[<p>Like I mentioned in my <a href="http://ericpfisher.github.io/blog/2014/05/15/going-hard/">previous post</a>, working through the <em>Learn Ruby on Rails</em> book. So far, so good. Finished chapters 11 and 12 today.</p>

<h4>Chapter 11: Gems</h4>

<p>Okay, so you can probably find everything I&rsquo;m about to say on other sites, but I&rsquo;m writing it down for my own learning, something you should do, too!</p>

<p>Gems (in Ruby) are libraries of code, hosted at <a href="https://rubygems.org">RubyGems</a>. Anyone can make a Ruby gem and push it to RubyGems, but the real test is the popularity of the gem: if it&rsquo;s a good product and well-supported, that cycle will continue by more people using the gem, discovering new bugs, contributing back into fixing the gem, and extending the usefulness. The less awesome your gem is, the fewer people use it. Some gems are tried and true; others are more obscure. It&rsquo;s up to us as developers to figure out which tool is right for the job.</p>

<p>To add a new gem to your project, you must first add it to the Gemfile:
<code>ruby Gemfile
gem 'the-best-gem-ever', '1.0'
</code></p>

<p>To declare the version of the gem installed, you can follow the gem name with one of the following:</p>

<ul>
<li>  explicit version number, e.g. &lsquo;1.0&rsquo;</li>
<li>  optimistic version &ndash; &ldquo;this version, or newer&rdquo;, e.g. <code>'&gt;= 1.0'</code></li>
<li>  pessimistic version &ndash; &ldquo;this version, or older&rdquo;, e.g. <code>'~&gt; 1.0'</code></li>
</ul>


<p>The more specific the version listed, the more exact of gem build you&rsquo;ll specify. For example, if you listed <code>'~&gt; 1.0.0'</code>, bundler would use 1.0.x, but nothing at or above 1.1. Also, if you specified <code>'~&gt; 1.0'</code>, bundler would use 1.x, but nothing at or above 2.0. Declaring this is essential when making sure all the components of your Rails app will play nicely with each other. :)</p>

<p>After specifying all the gems you&rsquo;ll want/need for your project, navigate to the project directory and run <code>bundle install</code> to install the gems listed in the Gemfile. Then, to see which gems are loaded into the environment, run <code>gem list</code>.</p>

<h4>Chapter 12: Configure</h4>

<p>Now that we&rsquo;ve installed all the gems for the project, it&rsquo;s time to configure them so the Rails app can use them.</p>

<p>The chapter goes over editing your <code>config/application.yml</code> from the <a href="https://rubygems.org/gems/figaro">figaro gem</a> and your <code>config/environment/developent/rb</code> to set environment variables related to the outbound email account for your Rails app. The tutorial has you set up a <a href="http://mailchimp.com">MailChimp</a> account and plug in the MailChimp API key along with your Gmail account (<em>make a new one if you have to!</em>). Then, you configure your development environment to use the environment variables defined in the <code>application.yml</code>. So far, so good.</p>

<h4>More to come&hellip;</h4>

<p>The next chapter starts content creation, beginning with static pages. I&rsquo;m going to do more <em>Learn Ruby the Hard Way</em>, then practice logic.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Hard]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/05/15/going-hard/"/>
    <updated>2014-05-15T13:57:29-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/05/15/going-hard</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my previous post, but quite a bit has happened. I built a little utility called &ldquo;Treble&rdquo; that I use internally to <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/ditto.1.html">ditto</a> data between Macs. Treble adds a progress bar to ditto and uses <a href="https://www.tropo.com/">Tropo</a> to text you once the copy is complete. Had to brush up on my bash scripting to make it happen, but with some persistence, that&rsquo;s another personal project I can cross off my list. :)</p>

<h4>Ruby, I Love You&hellip;Every Two Months</h4>

<p>I&rsquo;ve been really bad at being consistent with my studying, but not recently! <a href="http://en.wikipedia.org/wiki/Zed_Shaw">Zed Shaw</a>&rsquo;s <a href="http://learncodethehardway.org/">Learn Code the Hard Way</a> has taunted me for too long. I started with the Python book, but eventually lost interest in Python when I realized most (again, <em>most</em>) people who sing its praises are involved in some form of higher math or physics. Nothing against Python; I just found something I like better: Ruby.</p>

<p>So, I tried the &ldquo;Learn Ruby the Hard Way&rdquo; book a couple of times in the past, but only made it about halfway through. <em>This</em> time, I started from scratch, paced myself, and I&rsquo;m currently at Exercise 27, &ldquo;Memorizing Logic.&rdquo; I have to remind myself to stick with it because practice is the only way to mastery. Same thing with my French. J'aime Ruby.</p>

<p>To help with my memorization, I found this nifty site, <a href="http://quizlet.com/">Quizlet</a>. I searched the site for &ldquo;Learn Ruby the Hard Way logic&rdquo; and found that at least 10 other people have made online flashcard sets for Exercise 27. Without even registering, I&rsquo;m using someone else&rsquo;s flashcards to keep my logic skills sharp. not(True or False) == False.</p>

<h4>Throw In Some Rails Learning, And&hellip;</h4>

<p>I can&rsquo;t remember how I found it, but I stumbled upon the <a href="http://railsapps.github.io/">RailsApps</a> <a href="http://learn-rails.com/"><em>Learn Ruby on Rails</em></a> book. After skimming the first chapter, I could tell this is a great introduction before I try jumping into the deep end again with Michael Hartl&rsquo;s Rails tutorial (sick of posting links, Google it). The book includes some hand-holding, but there&rsquo;s a lot that you must do on your own. &ldquo;Configure this. Install that. Sign up for this service.&rdquo; I like that it&rsquo;s getting me prepared to actually deploy a Rails app once I&rsquo;m done with the book. Combining this with my Ruby study, and hopefully I&rsquo;ll have a solid foundation once I&rsquo;m done with both books.</p>

<h4>Cha-Cha Slide</h4>

<p>Back to work for me. I&rsquo;ll study some more, do my regular routine, and contemplate if I want to upload Treble to Github. In the meantime, here&rsquo;s the guts of Treble:</p>

<p>```bash ditto.sh from Treble</p>

<h1>!/bin/bash</h1>

<p>count(){</p>

<pre><code>FOLDER=$1
echo $(find ${FOLDER} | wc -l | sed 's/[[:space:]]//g')
</code></pre>

<p>}</p>

<p>size(){</p>

<pre><code>FOLDER=$1
echo $(du -s ${FOLDER} | awk '{print $1}' | sed 's/\(^[0-9]*\).*/\1/')
</code></pre>

<p>}</p>

<p>sendMessage(){</p>

<pre><code>TO=$1
MESSAGE=`echo -n "$COMPUTER ditto is done." | perl -pe's/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'`
appTokenID="&lt; hiding this &gt;"
curl "http://api.tropo.com/1.0/sessions?action=create&amp;token=${appTokenID}&amp;numberToMessage=${TO}&amp;messageToSend=${MESSAGE}&amp;messageType=SMS" &gt; /dev/null 2&gt;&amp;1  
</code></pre>

<p>}</p>

<p>SOURCE=$1
DESTINATION=$2
DIALOG=$3
PHONE=$4</p>

<p>COMPUTER=$(scutil &mdash;get LocalHostName)</p>

<p>SCOUNT=$(count $SOURCE)
SSIZE=$(size $SOURCE)</p>

<p>ditto &mdash;nocache ${SOURCE} ${DESTINATION} &amp;</p>

<p>DITTO_ID=$!</p>

<p>trap &ldquo;kill $DITTO_ID 2> /dev/null&rdquo; EXIT</p>

<p>while kill -0 $DITTO_ID 2> /dev/null; do</p>

<pre><code>DCOUNT=$(count $DESTINATION)
DSIZE=$(size $DESTINATION)
PERCENT=$(bc &lt;&lt;&lt; "scale = 2; (($DSIZE/$SSIZE) * 100)" | cut -d "." -f 1)
echo "$PERCENT $PERCENT%: $DCOUNT of $SCOUNT files copied."
</code></pre>

<p>done > >(${DIALOG}/Contents/MacOS/CocoaDialog progressbar &mdash;stoppable &mdash;title &ldquo;Treble&rdquo;)</p>

<p>trap &ndash; EXIT</p>

<p>sendMessage $PHONE</p>

<p>${DIALOG}/Contents/MacOS/CocoaDialog msgbox &mdash;title Treble &mdash;text &ldquo;Copy Complete!&rdquo; &mdash;informative-text &ldquo;$DCOUNT of $SCOUNT files copied.&rdquo; &mdash;button1 &ldquo;OK&rdquo;</p>

<p>exit 0
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Boxen]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/04/21/boxen/"/>
    <updated>2014-04-21T09:01:34-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/04/21/boxen</id>
    <content type="html"><![CDATA[<p>Before the weekend, I decided to poke around <a href="https://boxen.github.com/">Boxen</a> and see what all the fuss is about. I&rsquo;ve toyed around with Puppet, but struggled when it came to getting it working in a <em>pure</em> OS X environment, both agent and master (especially master). I had heard about Boxen when I first started investigating Puppet, but neglected to do enough research to find its true value: is it <em><em>the</em></em> OS X (master-less) Puppet!</p>

<p><em>Why Do I Need It?</em></p>

<p>Yeah, I had that question to. I thought, &ldquo;Hmm&hellip;I don&rsquo;t really manage Macs, and Puppet is for managing heterogenous groups of nodes (servers, computers), so it&rsquo;s probably not for me.&rdquo;</p>

<p>I was wrong.</p>

<h4>Overview</h4>

<p>Boxen is OS X&rsquo;s master-less Puppet. It&rsquo;s self-contained, meaning you can clone the <a href="https://github.com/boxen/our-boxen/">our-boxen</a> repository from Github, install Boxen, and run it. Mind you, it&rsquo;s going to be very bare-bones upon first run, but as you grow with your Mac, Boxen will be there every step of the way.</p>

<p>Boxen, like its Puppet cousin, works based upon the <em>state</em> you wish your machine to be in. Think about it this way:</p>

<p><em>&ldquo;Sublime Text should be installed.&rdquo;</em><br/>
<em>&ldquo;SSH should be activated and running.&rdquo;</em></p>

<p>A lot of &ldquo;shoulds.&rdquo; That&rsquo;s how Boxen works. You include modules that reflect the state your unit should be in, and on each run, Boxen checks the current configuration against the desired state&hellip;and makes configuration changes to put the unit in the desired state. There are two parts that enforce the &ldquo;state&rdquo; for your Mac: Puppetfile and the manifest (e.g. site.pp).</p>

<p>The Puppetfile is a list of resources, telling Boxen where to look when downloading modules:</p>

<p><code>ruby Puppetfile snippet
github "ruby",        "7.3.0"
</code></p>

<p>The &ldquo;github&rdquo; is a function declared earlier in the Puppetfile. It just takes the name of the module + it&rsquo;s module version and pulls the module data from Boxen&rsquo;s module list:</p>

<p>```ruby Puppetfile &ldquo;github&rdquo; method</p>

<h1>Shortcut for a module from GitHub&rsquo;s boxen organization</h1>

<p>def github(name, *args)
  options ||= if args.last.is_a? Hash</p>

<pre><code>args.last
</code></pre>

<p>  else</p>

<pre><code>{}
</code></pre>

<p>  end</p>

<p>  if path = options.delete(:path)</p>

<pre><code>mod name, :path =&gt; path
</code></pre>

<p>  else</p>

<pre><code>version = args.first
options[:repo] ||= "boxen/puppet-#{name}"
mod name, version, :github_tarball =&gt; options[:repo]
</code></pre>

<p>  end
end
```</p>

<p>Then, once you&rsquo;ve declared where to get your desired resources, you tell Boxen in the manifest (e.g. site.pp) that you want it to be included on this machine:</p>

<p><code>ruby Boxen manifest include
include ruby
</code></p>

<p>No extra punctuation needed. With those two things in place, Boxen will handle all the rest and get your computer configured the way you want.</p>

<h4>Gotcha No. 1</h4>

<p>Once Boxen was installed, I was all excited to try it out and install something I didn&rsquo;t have on my machine. The syntax for including modules in the Puppetfile looked very straight-forward. I just didn&rsquo;t know where people were getting their version numbers. To be honest, I&rsquo;m still not quite sure where to locate versions for modules, but I&rsquo;ve had the best luck using <a href="https://travis-ci.org/">Travis CI</a> and searching for Boxen modules. The module info usually contains a version. That&rsquo;s what I used for my Vagrant module&hellip;</p>

<h4>Gotcha No. 2</h4>

<p>There&rsquo;s a <a href="http://stackoverflow.com/questions/22352838/ruby-gem-install-json-fails-on-mavericks-and-xcode-5-1-unknown-argument-mul">compile bug</a> when running Boxen on OS X Mavericks:</p>

<p>To run it successfully while in the /opt/boxen/repo (and avoid FDE):</p>

<p><code>bash Mavericks vs. XCode 5.1
ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future ./script/boxen --no-fde
</code></p>

<h3>Onward</h3>

<p>I&rsquo;m excited to grow with Boxen and discover new ways to enhance my own workflow. Now, to keep this enthusiasm up&hellip;</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Schooled]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/02/24/got-schooled/"/>
    <updated>2014-02-24T15:04:03-06:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/02/24/got-schooled</id>
    <content type="html"><![CDATA[<p>I thought I was hot stuff going through Chris Pine&rsquo;s <a href="http://pragprog.com/book/ltp2/learn-to-program"><em>Learn To Program</em></a> when I blitzed through the first nine chapters no problem. The exercises were a good challenge, but didn&rsquo;t pose too much of a threat&hellip;</p>

<p>And then I got to chapter ten. In ten, Chris struck a cord with me when he challenges his readers to define his or her own <em>sort</em> method:</p>

<blockquote><p>&hellip;like the Jedi who constructs his own lightsaber, you&rsquo;ll exhibit a greater mastery if you write your own sorting method.</p></blockquote>

<p>Challenge accepted! That was five days ago.</p>

<h3>Enter the Sorting Dragon</h3>

<p>I tried everything I could think of, but still struggled with ultimately keeping track of my data.  I found a great analogy someone posted about treating the elements of your array like playing cards (having &ldquo;sorted&rdquo;, &ldquo;unsorted&rdquo;, and &ldquo;active&rdquo; groups of elements), and think of solving the problem that way. That was a good starting point, but I was still struggling because I couldn&rsquo;t find a way to selectively remove elements from the unsorted array once I had added them to the sorted array.</p>

<p>So, I eventually broke down and checked Chris' solution at the end of the book. Our code was identical except for one key point of logic:</p>

<h5>Me:</h5>

<ol>
<li>Pop an element from the original array.</li>
<li>Add it to the sorted list.</li>
<li>Iterate through the remaining elements.

<ul>
<li>If there was an element smaller than what was already added, replace it and push the less-small element back into the unsorted pile.</li>
</ul>
</li>
<li>Repeat (using array.each) until length of sorted array matched original array.</li>
</ol>


<h6>Chris:</h6>

<ol>
<li>Pop an element from the original array.</li>
<li>Assign it to a local variable. Create an empty &ldquo;unsorted&rdquo; array.</li>
<li>Iterate through the remaning elements.

<ul>
<li>If there was a smaller element than what was reference by the variable, replace it and push the less-small element to the &ldquo;unsorted&rdquo; array.</li>
</ul>
</li>
<li>Repeat (using array.each) until the variable contains the smallest element from the original array.</li>
<li>Push that smallest element into the &ldquo;sorted&rdquo; array, and recursively pass the &ldquo;unsorted&rdquo; array to the sort method until the &ldquo;unsorted&rdquo;.length &lt;= 0.</li>
</ol>


<h4>Conclusion</h4>

<p>Well, I have to give myself <em>some</em> credit. When I saw his answer, he and I were on the same page logic-wise. But, like a math problem, the devil is in the details. I was performing an action a bit too soon and hadn&rsquo;t separated my logic from my action: I was adding to the sorted list and <em>then</em> comparing instead of the other way around.</p>

<p>All in all, I think this was a very valuable lesson for me, that I&rsquo;m not as much an &ldquo;advanced beginner&rdquo; as I thought I was. I&rsquo;m going to try to swallow my pride (which was a bit hurt, I&rsquo;ll be honest), finish the exercises in the chapter, and keep learning.</p>

<p>No giving up.</p>
]]></content>
  </entry>
  
</feed>
