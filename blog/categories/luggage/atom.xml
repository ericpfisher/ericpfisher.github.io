<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Luggage | Fish(er)]]></title>
  <link href="http://ericpfisher.github.io/blog/categories/luggage/atom.xml" rel="self"/>
  <link href="http://ericpfisher.github.io/"/>
  <updated>2014-06-17T16:13:16-05:00</updated>
  <id>http://ericpfisher.github.io/</id>
  <author>
    <name><![CDATA[Eric Fisher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[So Much Learnt]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/06/17/so-much-learnt/"/>
    <updated>2014-06-17T10:19:23-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/06/17/so-much-learnt</id>
    <content type="html"><![CDATA[<p>Holy shit. I&rsquo;ve been going crazy with learning lately. Mathias Bynens' legendary <a href="http://mths.be/osx">~/.osx</a>, Robin Ricard&rsquo;s <a href="http://osxc.github.io/">osxc</a>, the amazing power of <a href="http://docs.vagrantup.com/v2/getting-started/">Vagrant</a>, and most recently Joe Block&rsquo;s pkg-maker <a href="https://github.com/unixorn/luggage">Luggage</a>. I know I don&rsquo;t have the timespace to give each tool the detailed overview it deserves, so I&rsquo;m going to go over Luggage.</p>

<h4>&ldquo;So you want to make a package, eh?&rdquo;</h4>

<p>Alright, I know I masquerade as a Mac Engineer, but I&rsquo;m not…yet. I&rsquo;m trying my hardest, but, ya know, politics…</p>

<p>So, I get it in my head the other day that having a Microsoft Office for Mac uninstaller might be nice. In my years of supporting Macs, Microsoft has never included a nice and concise method of removing its software from OS X. Instead, they direct you to a knowledge base article: <a href="http://support.microsoft.com/kb/2398768">How to completely remove Office for Mac 2011</a>. SO LAME!</p>

<p>Step 1, remove this thing. Step 2, remove this other thing. Step 3, remove this other thing next to the thing you removed two steps ago. Drives me nuts every time. &ldquo;Someone has to have made a nice uninstallation method,&rdquo; I said. Though the magic of the internet, I found a few bash scripts, AppleScripts, etc. But, where&rsquo;s the fun in that? &ldquo;If all those other people did was script the removal of the components that Microsoft says to remove in their KB article, why can&rsquo;t I just make one myself?&rdquo; So, I did.</p>

<p>Now, the scripting of the removal was easy:</p>

<p>```bash Uninstall Office</p>

<h1>!/bin/bash</h1>

<p>REMOVE_ME=( &ldquo;Microsoft Outlook&rdquo; &ldquo;Microsoft Word&rdquo; &ldquo;Microsoft PowerPoint&rdquo; &ldquo;Microsoft Excel&rdquo; &ldquo;Microsoft Messenger&rdquo; &ldquo;Microsoft Remote Desktop&rdquo; &ldquo;Microsoft Document Connection&rdquo; &ldquo;Microsoft Lync&rdquo; )
DOCK_PREFS=&ldquo;${HOME}/Library/Preferences/com.apple.dock.plist&rdquo;
PLISTBUDDY=&ldquo;/usr/libexec/PlistBuddy&rdquo;</p>

<p>for app in &ldquo;${REMOVE_ME[@]}&rdquo;; do</p>

<pre><code>killall "$app"
</code></pre>

<p>done</p>

<p>rm -R &ldquo;/Applications/Microsoft Office 2011&rdquo;
rm -R &ldquo;/Applications/Microsoft Messenger.app&rdquo;
rm -R &ldquo;/Applications/Microsoft Remote Desktop.app&rdquo;
rm -R &ldquo;/Applications/Microsoft Lync.app&rdquo;
rm -R ~/Library/Preferences/com.microsoft<em>
rm -R /Library/LaunchDaemons/com.microsoft.office.licensing.helper.plist
rm -R /Library/PrivilegedHelperTools/com.microsoft.office.licensing.helper
rm -R /Library/Preferences/com.microsoft.office.licensing.plist
rm -R ~/Library/Preferences/ByHost/com.microsoft</em>
rm -R &ldquo;/Library/Application Support/Microsoft&rdquo;
rm -R /private/var/db/receipts/com.microsoft*
rm -R ~/Library/Application\ Support/Microsoft/Office
rm -R /Library/Fonts/Microsoft
mv ~/Documents/Microsoft\ User\ Data ~/Desktop</p>

<p>sleep 10</p>

<p>for app in &ldquo;${REMOVE_ME[@]}&rdquo;; do</p>

<pre><code>for (( item=0; item &lt; 100; item++ )); do
    app_name=$( "$PLISTBUDDY" -c "print persistent-apps:$item:tile-data:file-label" "$DOCK_PREFS" 2&gt; /dev/null );

    if [[ "$app_name" == "$app" ]]; then
        "$PLISTBUDDY" -c "delete persistent-apps:$item" "$DOCK_PREFS" 2&gt; /dev/null;
    fi
done
</code></pre>

<p>done
killall cfprefsd &amp;&amp; killall Dock
```</p>

<p>In short, kills any of the apps if they&rsquo;re open, (re)moves all the items Microsofts lists in the KB article (link above), and then iterates through the Dock plist to remove any relevant Dock items. No big deal.</p>

<h4>Distribution?</h4>

<p>Now, it&rsquo;s obviously easy to run this script locally and sudo it. However, I work in a location with over 2000 Macs and 32 floors. I <strong><em>DO NOT</em></strong> want to ride the elevator &ldquo;x&rdquo; number of floors just to plug in my flash drive and run a script. Additionally, <code>sudo</code>-ing things through Apple Remote Desktop hasn&rsquo;t proven to be the simplest task. I think a .pkg is the best option.</p>

<p>At first, I was trying to use Apple&rsquo;s <a href="http://en.wikipedia.org/wiki/Apple_Developer_Tools#PackageMaker">PackageMaker</a>, which is still available from Apple&rsquo;s <a href="https://developer.apple.com/downloads/">Developer Portal Downloads</a> (search for &ldquo;packagemaker&rdquo; and download Auxiliary Tools for Xcode). <strong><em>However</em></strong>, PackageMaker was &ldquo;dropped&rdquo; by Apple circa 10.5/10.6, instead going the way of the command line with <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pkgbuild.1.html"><code>pkgbuild</code></a>, <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/productbuild.1.html#//apple_ref/doc/man/1/productbuild"><code>productbuild</code></a> for Mac App Store distribution, and the awesome <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pkgutil.1.html"><code>pkgutil</code></a>.</p>

<p>I tried <code>pkgbuild</code> first, and it looked the most promising. When I built my first package, it was tricky trying to wrangle the preinstall/postinstall scripts where I wanted them. On top of that, I didn&rsquo;t want to overtly make any payloads, and the way I was using <code>pkgbuild</code> put one in there every time. So, I did some research about package creation and came across Luggage (link is above).</p>

<h4>Graham Gilbert, You Rascal</h4>

<p>Yeah, he&rsquo;s pretty much an idol of mine when it comes to Mac systems management. As I was browsing the wiki for Luggage, I saw that Graham has written an <strong><em>awesome</em></strong> <a href="http://grahamgilbert.com/blog/2013/08/09/the-luggage-an-introduction/">tutorial</a> for Luggage, and in his intro, he makes an awesome point:</p>

<p>Luggage is all text! This means packages can be repo-ed and version-controlled!</p>

<p>With my Office uninstaller, all I really needed to was to turn my main script into a postinstall script. With my script in the same directory as my Makefile…:</p>

<p>```bash Office Uninstall Luggage Makefile
USE_PKGBUILD=1
include /usr/local/share/luggage/luggage.make</p>

<p>TITLE=&ldquo;Uninstall Office for Mac&rdquo;
PACKAGE_NAME=&ldquo;Uninstall Office for Mac&rdquo;
REVERSE_DOMAIN=com.ericpfisher
PAYLOAD=\</p>

<pre><code>pack-script-postinstall
</code></pre>

<p><code>``
…all I need to do is</code>make pkg` from the Makefile directory and <strong><em>BAM!</em></strong> I now have a beautiful Office for Mac uninstaller in a nice package.</p>

<p>In summary, I recommend you go to Graham&rsquo;s tutorial I linked above and check out Luggage. Joe Block made an awesome tool, and since things can be tracked with version control, the possibilities are endless!</p>
]]></content>
  </entry>
  
</feed>
