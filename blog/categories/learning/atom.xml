<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Learning | Fish(er)]]></title>
  <link href="http://ericpfisher.github.io/blog/categories/learning/atom.xml" rel="self"/>
  <link href="http://ericpfisher.github.io/"/>
  <updated>2014-06-17T16:13:16-05:00</updated>
  <id>http://ericpfisher.github.io/</id>
  <author>
    <name><![CDATA[Eric Fisher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Bash's Sort]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/06/06/bashs-sort/"/>
    <updated>2014-06-06T15:20:20-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/06/06/bashs-sort</id>
    <content type="html"><![CDATA[<h4>Small Victory</h4>

<p>So, Mac Engineering pings me today, asking me to solve a problem. Here&rsquo;s the original script:</p>

<p>```bash Sort Problem
UPDATE_VERSION=&ldquo;12.1.9&rdquo;
NEWLINE=$&lsquo;\n&rsquo;</p>

<p>if [ &ldquo;$UPDATE_VERSION&rdquo; = &ldquo;12.1.9&rdquo; ]; then</p>

<pre><code>INSTALLED_VERSION="12.1.10"
</code></pre>

<p>else</p>

<pre><code>exit 1
</code></pre>

<p>fi</p>

<p>HIGHEST_VERSION=<code>echo "${UPDATE_VERSION}${NEWLINE}${INSTALLED_VERSION}" | sort | tail -n 1</code>
echo &ldquo;$HIGHEST_VERSION&rdquo;
if [ &ldquo;${INSTALLED_VERSION}&rdquo; != &ldquo;${HIGHEST_VERSION}&rdquo; ];
then</p>

<pre><code>exit 0
</code></pre>

<p>fi</p>

<p>exit 1
<code>``
The problem is that</code>sort<code>was sorting the third octet's first digit instead of taking it as a whole. So, while we wanted "12.1.10" to show up from the</code>tail`, we were getting &ldquo;12.1.9&rdquo; back.</p>

<h4>TO TEH INTERNETZ</h4>

<p>Did some research (which was actually reading the man page of sort), and I came across the <code>-k</code> flag:</p>

<blockquote><p>The recommended, POSIX, option for specifying a sort field.  The field consists of the part of the line between POS1 and POS2 (or the end of the line, if POS2 is omitted), <em>inclusive</em>.  Fields and character positions are numbered starting with 1.  So to sort on the second field, you&rsquo;d use `-k 2,2' See below for more examples.</p></blockquote>

<p>After playing around with a few attempts, I finally came up with&hellip;</p>

<p><code>bash Awesome Version Sort
sort -t . -k 1,1n -k 2,2n -k 3,3n
</code></p>

<p>Breaking it down in English, the <code>sort</code> command separates fields by each decimal (<code>-t .</code>). Then, <code>sort</code> sorts the first field (<code>-k 1,1n</code>), second field (<code>-k 2,2n</code>), and so on.</p>

<p>IMPORTANT NOTE: the reason you specify <code>-k x,xn</code> is to have <code>sort</code> <strong><em>n</em></strong>umerically sort each field separately. That way, instead of thinking the 1 in x.x.10 is less than x.x.9, you have &ldquo;10&rdquo; vs. &ldquo;9&rdquo;, and 10 is obviously larger than 9.</p>

<p>Seems to work like a charm&hellip;and scalable, too! If you need to sort another octet in your versioning, just add another sort field like <code>-k 4,4n</code>. Learned something new today, and helped Engineering in the process. What a great day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Got Schooled]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/02/24/got-schooled/"/>
    <updated>2014-02-24T15:04:03-06:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/02/24/got-schooled</id>
    <content type="html"><![CDATA[<p>I thought I was hot stuff going through Chris Pine&rsquo;s <a href="http://pragprog.com/book/ltp2/learn-to-program"><em>Learn To Program</em></a> when I blitzed through the first nine chapters no problem. The exercises were a good challenge, but didn&rsquo;t pose too much of a threat&hellip;</p>

<p>And then I got to chapter ten. In ten, Chris struck a cord with me when he challenges his readers to define his or her own <em>sort</em> method:</p>

<blockquote><p>&hellip;like the Jedi who constructs his own lightsaber, you&rsquo;ll exhibit a greater mastery if you write your own sorting method.</p></blockquote>

<p>Challenge accepted! That was five days ago.</p>

<h3>Enter the Sorting Dragon</h3>

<p>I tried everything I could think of, but still struggled with ultimately keeping track of my data.  I found a great analogy someone posted about treating the elements of your array like playing cards (having &ldquo;sorted&rdquo;, &ldquo;unsorted&rdquo;, and &ldquo;active&rdquo; groups of elements), and think of solving the problem that way. That was a good starting point, but I was still struggling because I couldn&rsquo;t find a way to selectively remove elements from the unsorted array once I had added them to the sorted array.</p>

<p>So, I eventually broke down and checked Chris' solution at the end of the book. Our code was identical except for one key point of logic:</p>

<h5>Me:</h5>

<ol>
<li>Pop an element from the original array.</li>
<li>Add it to the sorted list.</li>
<li>Iterate through the remaining elements.

<ul>
<li>If there was an element smaller than what was already added, replace it and push the less-small element back into the unsorted pile.</li>
</ul>
</li>
<li>Repeat (using array.each) until length of sorted array matched original array.</li>
</ol>


<h6>Chris:</h6>

<ol>
<li>Pop an element from the original array.</li>
<li>Assign it to a local variable. Create an empty &ldquo;unsorted&rdquo; array.</li>
<li>Iterate through the remaning elements.

<ul>
<li>If there was a smaller element than what was reference by the variable, replace it and push the less-small element to the &ldquo;unsorted&rdquo; array.</li>
</ul>
</li>
<li>Repeat (using array.each) until the variable contains the smallest element from the original array.</li>
<li>Push that smallest element into the &ldquo;sorted&rdquo; array, and recursively pass the &ldquo;unsorted&rdquo; array to the sort method until the &ldquo;unsorted&rdquo;.length &lt;= 0.</li>
</ol>


<h4>Conclusion</h4>

<p>Well, I have to give myself <em>some</em> credit. When I saw his answer, he and I were on the same page logic-wise. But, like a math problem, the devil is in the details. I was performing an action a bit too soon and hadn&rsquo;t separated my logic from my action: I was adding to the sorted list and <em>then</em> comparing instead of the other way around.</p>

<p>All in all, I think this was a very valuable lesson for me, that I&rsquo;m not as much an &ldquo;advanced beginner&rdquo; as I thought I was. I&rsquo;m going to try to swallow my pride (which was a bit hurt, I&rsquo;ll be honest), finish the exercises in the chapter, and keep learning.</p>

<p>No giving up.</p>
]]></content>
  </entry>
  
</feed>
