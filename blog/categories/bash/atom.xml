<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Bash | Fish(er)]]></title>
  <link href="http://ericpfisher.github.io/blog/categories/bash/atom.xml" rel="self"/>
  <link href="http://ericpfisher.github.io/"/>
  <updated>2014-06-17T16:13:16-05:00</updated>
  <id>http://ericpfisher.github.io/</id>
  <author>
    <name><![CDATA[Eric Fisher]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[So Much Learnt]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/06/17/so-much-learnt/"/>
    <updated>2014-06-17T10:19:23-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/06/17/so-much-learnt</id>
    <content type="html"><![CDATA[<p>Holy shit. I&rsquo;ve been going crazy with learning lately. Mathias Bynens' legendary <a href="http://mths.be/osx">~/.osx</a>, Robin Ricard&rsquo;s <a href="http://osxc.github.io/">osxc</a>, the amazing power of <a href="http://docs.vagrantup.com/v2/getting-started/">Vagrant</a>, and most recently Joe Block&rsquo;s pkg-maker <a href="https://github.com/unixorn/luggage">Luggage</a>. I know I don&rsquo;t have the timespace to give each tool the detailed overview it deserves, so I&rsquo;m going to go over Luggage.</p>

<h4>&ldquo;So you want to make a package, eh?&rdquo;</h4>

<p>Alright, I know I masquerade as a Mac Engineer, but I&rsquo;m not…yet. I&rsquo;m trying my hardest, but, ya know, politics…</p>

<p>So, I get it in my head the other day that having a Microsoft Office for Mac uninstaller might be nice. In my years of supporting Macs, Microsoft has never included a nice and concise method of removing its software from OS X. Instead, they direct you to a knowledge base article: <a href="http://support.microsoft.com/kb/2398768">How to completely remove Office for Mac 2011</a>. SO LAME!</p>

<p>Step 1, remove this thing. Step 2, remove this other thing. Step 3, remove this other thing next to the thing you removed two steps ago. Drives me nuts every time. &ldquo;Someone has to have made a nice uninstallation method,&rdquo; I said. Though the magic of the internet, I found a few bash scripts, AppleScripts, etc. But, where&rsquo;s the fun in that? &ldquo;If all those other people did was script the removal of the components that Microsoft says to remove in their KB article, why can&rsquo;t I just make one myself?&rdquo; So, I did.</p>

<p>Now, the scripting of the removal was easy:</p>

<p>```bash Uninstall Office</p>

<h1>!/bin/bash</h1>

<p>REMOVE_ME=( &ldquo;Microsoft Outlook&rdquo; &ldquo;Microsoft Word&rdquo; &ldquo;Microsoft PowerPoint&rdquo; &ldquo;Microsoft Excel&rdquo; &ldquo;Microsoft Messenger&rdquo; &ldquo;Microsoft Remote Desktop&rdquo; &ldquo;Microsoft Document Connection&rdquo; &ldquo;Microsoft Lync&rdquo; )
DOCK_PREFS=&ldquo;${HOME}/Library/Preferences/com.apple.dock.plist&rdquo;
PLISTBUDDY=&ldquo;/usr/libexec/PlistBuddy&rdquo;</p>

<p>for app in &ldquo;${REMOVE_ME[@]}&rdquo;; do</p>

<pre><code>killall "$app"
</code></pre>

<p>done</p>

<p>rm -R &ldquo;/Applications/Microsoft Office 2011&rdquo;
rm -R &ldquo;/Applications/Microsoft Messenger.app&rdquo;
rm -R &ldquo;/Applications/Microsoft Remote Desktop.app&rdquo;
rm -R &ldquo;/Applications/Microsoft Lync.app&rdquo;
rm -R ~/Library/Preferences/com.microsoft<em>
rm -R /Library/LaunchDaemons/com.microsoft.office.licensing.helper.plist
rm -R /Library/PrivilegedHelperTools/com.microsoft.office.licensing.helper
rm -R /Library/Preferences/com.microsoft.office.licensing.plist
rm -R ~/Library/Preferences/ByHost/com.microsoft</em>
rm -R &ldquo;/Library/Application Support/Microsoft&rdquo;
rm -R /private/var/db/receipts/com.microsoft*
rm -R ~/Library/Application\ Support/Microsoft/Office
rm -R /Library/Fonts/Microsoft
mv ~/Documents/Microsoft\ User\ Data ~/Desktop</p>

<p>sleep 10</p>

<p>for app in &ldquo;${REMOVE_ME[@]}&rdquo;; do</p>

<pre><code>for (( item=0; item &lt; 100; item++ )); do
    app_name=$( "$PLISTBUDDY" -c "print persistent-apps:$item:tile-data:file-label" "$DOCK_PREFS" 2&gt; /dev/null );

    if [[ "$app_name" == "$app" ]]; then
        "$PLISTBUDDY" -c "delete persistent-apps:$item" "$DOCK_PREFS" 2&gt; /dev/null;
    fi
done
</code></pre>

<p>done
killall cfprefsd &amp;&amp; killall Dock
```</p>

<p>In short, kills any of the apps if they&rsquo;re open, (re)moves all the items Microsofts lists in the KB article (link above), and then iterates through the Dock plist to remove any relevant Dock items. No big deal.</p>

<h4>Distribution?</h4>

<p>Now, it&rsquo;s obviously easy to run this script locally and sudo it. However, I work in a location with over 2000 Macs and 32 floors. I <strong><em>DO NOT</em></strong> want to ride the elevator &ldquo;x&rdquo; number of floors just to plug in my flash drive and run a script. Additionally, <code>sudo</code>-ing things through Apple Remote Desktop hasn&rsquo;t proven to be the simplest task. I think a .pkg is the best option.</p>

<p>At first, I was trying to use Apple&rsquo;s <a href="http://en.wikipedia.org/wiki/Apple_Developer_Tools#PackageMaker">PackageMaker</a>, which is still available from Apple&rsquo;s <a href="https://developer.apple.com/downloads/">Developer Portal Downloads</a> (search for &ldquo;packagemaker&rdquo; and download Auxiliary Tools for Xcode). <strong><em>However</em></strong>, PackageMaker was &ldquo;dropped&rdquo; by Apple circa 10.5/10.6, instead going the way of the command line with <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pkgbuild.1.html"><code>pkgbuild</code></a>, <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/productbuild.1.html#//apple_ref/doc/man/1/productbuild"><code>productbuild</code></a> for Mac App Store distribution, and the awesome <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/pkgutil.1.html"><code>pkgutil</code></a>.</p>

<p>I tried <code>pkgbuild</code> first, and it looked the most promising. When I built my first package, it was tricky trying to wrangle the preinstall/postinstall scripts where I wanted them. On top of that, I didn&rsquo;t want to overtly make any payloads, and the way I was using <code>pkgbuild</code> put one in there every time. So, I did some research about package creation and came across Luggage (link is above).</p>

<h4>Graham Gilbert, You Rascal</h4>

<p>Yeah, he&rsquo;s pretty much an idol of mine when it comes to Mac systems management. As I was browsing the wiki for Luggage, I saw that Graham has written an <strong><em>awesome</em></strong> <a href="http://grahamgilbert.com/blog/2013/08/09/the-luggage-an-introduction/">tutorial</a> for Luggage, and in his intro, he makes an awesome point:</p>

<p>Luggage is all text! This means packages can be repo-ed and version-controlled!</p>

<p>With my Office uninstaller, all I really needed to was to turn my main script into a postinstall script. With my script in the same directory as my Makefile…:</p>

<p>```bash Office Uninstall Luggage Makefile
USE_PKGBUILD=1
include /usr/local/share/luggage/luggage.make</p>

<p>TITLE=&ldquo;Uninstall Office for Mac&rdquo;
PACKAGE_NAME=&ldquo;Uninstall Office for Mac&rdquo;
REVERSE_DOMAIN=com.ericpfisher
PAYLOAD=\</p>

<pre><code>pack-script-postinstall
</code></pre>

<p><code>``
…all I need to do is</code>make pkg` from the Makefile directory and <strong><em>BAM!</em></strong> I now have a beautiful Office for Mac uninstaller in a nice package.</p>

<p>In summary, I recommend you go to Graham&rsquo;s tutorial I linked above and check out Luggage. Joe Block made an awesome tool, and since things can be tracked with version control, the possibilities are endless!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bash's Sort]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/06/06/bashs-sort/"/>
    <updated>2014-06-06T15:20:20-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/06/06/bashs-sort</id>
    <content type="html"><![CDATA[<h4>Small Victory</h4>

<p>So, Mac Engineering pings me today, asking me to solve a problem. Here&rsquo;s the original script:</p>

<p>```bash Sort Problem
UPDATE_VERSION=&ldquo;12.1.9&rdquo;
NEWLINE=$&lsquo;\n&rsquo;</p>

<p>if [ &ldquo;$UPDATE_VERSION&rdquo; = &ldquo;12.1.9&rdquo; ]; then</p>

<pre><code>INSTALLED_VERSION="12.1.10"
</code></pre>

<p>else</p>

<pre><code>exit 1
</code></pre>

<p>fi</p>

<p>HIGHEST_VERSION=<code>echo "${UPDATE_VERSION}${NEWLINE}${INSTALLED_VERSION}" | sort | tail -n 1</code>
echo &ldquo;$HIGHEST_VERSION&rdquo;
if [ &ldquo;${INSTALLED_VERSION}&rdquo; != &ldquo;${HIGHEST_VERSION}&rdquo; ];
then</p>

<pre><code>exit 0
</code></pre>

<p>fi</p>

<p>exit 1
<code>``
The problem is that</code>sort<code>was sorting the third octet's first digit instead of taking it as a whole. So, while we wanted "12.1.10" to show up from the</code>tail`, we were getting &ldquo;12.1.9&rdquo; back.</p>

<h4>TO TEH INTERNETZ</h4>

<p>Did some research (which was actually reading the man page of sort), and I came across the <code>-k</code> flag:</p>

<blockquote><p>The recommended, POSIX, option for specifying a sort field.  The field consists of the part of the line between POS1 and POS2 (or the end of the line, if POS2 is omitted), <em>inclusive</em>.  Fields and character positions are numbered starting with 1.  So to sort on the second field, you&rsquo;d use `-k 2,2' See below for more examples.</p></blockquote>

<p>After playing around with a few attempts, I finally came up with&hellip;</p>

<p><code>bash Awesome Version Sort
sort -t . -k 1,1n -k 2,2n -k 3,3n
</code></p>

<p>Breaking it down in English, the <code>sort</code> command separates fields by each decimal (<code>-t .</code>). Then, <code>sort</code> sorts the first field (<code>-k 1,1n</code>), second field (<code>-k 2,2n</code>), and so on.</p>

<p>IMPORTANT NOTE: the reason you specify <code>-k x,xn</code> is to have <code>sort</code> <strong><em>n</em></strong>umerically sort each field separately. That way, instead of thinking the 1 in x.x.10 is less than x.x.9, you have &ldquo;10&rdquo; vs. &ldquo;9&rdquo;, and 10 is obviously larger than 9.</p>

<p>Seems to work like a charm&hellip;and scalable, too! If you need to sort another octet in your versioning, just add another sort field like <code>-k 4,4n</code>. Learned something new today, and helped Engineering in the process. What a great day!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Going Hard]]></title>
    <link href="http://ericpfisher.github.io/blog/2014/05/15/going-hard/"/>
    <updated>2014-05-15T13:57:29-05:00</updated>
    <id>http://ericpfisher.github.io/blog/2014/05/15/going-hard</id>
    <content type="html"><![CDATA[<p>It&rsquo;s been a while since my previous post, but quite a bit has happened. I built a little utility called &ldquo;Treble&rdquo; that I use internally to <a href="https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/ditto.1.html">ditto</a> data between Macs. Treble adds a progress bar to ditto and uses <a href="https://www.tropo.com/">Tropo</a> to text you once the copy is complete. Had to brush up on my bash scripting to make it happen, but with some persistence, that&rsquo;s another personal project I can cross off my list. :)</p>

<h4>Ruby, I Love You&hellip;Every Two Months</h4>

<p>I&rsquo;ve been really bad at being consistent with my studying, but not recently! <a href="http://en.wikipedia.org/wiki/Zed_Shaw">Zed Shaw</a>&rsquo;s <a href="http://learncodethehardway.org/">Learn Code the Hard Way</a> has taunted me for too long. I started with the Python book, but eventually lost interest in Python when I realized most (again, <em>most</em>) people who sing its praises are involved in some form of higher math or physics. Nothing against Python; I just found something I like better: Ruby.</p>

<p>So, I tried the &ldquo;Learn Ruby the Hard Way&rdquo; book a couple of times in the past, but only made it about halfway through. <em>This</em> time, I started from scratch, paced myself, and I&rsquo;m currently at Exercise 27, &ldquo;Memorizing Logic.&rdquo; I have to remind myself to stick with it because practice is the only way to mastery. Same thing with my French. J'aime Ruby.</p>

<p>To help with my memorization, I found this nifty site, <a href="http://quizlet.com/">Quizlet</a>. I searched the site for &ldquo;Learn Ruby the Hard Way logic&rdquo; and found that at least 10 other people have made online flashcard sets for Exercise 27. Without even registering, I&rsquo;m using someone else&rsquo;s flashcards to keep my logic skills sharp. not(True or False) == False.</p>

<h4>Throw In Some Rails Learning, And&hellip;</h4>

<p>I can&rsquo;t remember how I found it, but I stumbled upon the <a href="http://railsapps.github.io/">RailsApps</a> <a href="http://learn-rails.com/"><em>Learn Ruby on Rails</em></a> book. After skimming the first chapter, I could tell this is a great introduction before I try jumping into the deep end again with Michael Hartl&rsquo;s Rails tutorial (sick of posting links, Google it). The book includes some hand-holding, but there&rsquo;s a lot that you must do on your own. &ldquo;Configure this. Install that. Sign up for this service.&rdquo; I like that it&rsquo;s getting me prepared to actually deploy a Rails app once I&rsquo;m done with the book. Combining this with my Ruby study, and hopefully I&rsquo;ll have a solid foundation once I&rsquo;m done with both books.</p>

<h4>Cha-Cha Slide</h4>

<p>Back to work for me. I&rsquo;ll study some more, do my regular routine, and contemplate if I want to upload Treble to Github. In the meantime, here&rsquo;s the guts of Treble:</p>

<p>```bash ditto.sh from Treble</p>

<h1>!/bin/bash</h1>

<p>count(){</p>

<pre><code>FOLDER=$1
echo $(find ${FOLDER} | wc -l | sed 's/[[:space:]]//g')
</code></pre>

<p>}</p>

<p>size(){</p>

<pre><code>FOLDER=$1
echo $(du -s ${FOLDER} | awk '{print $1}' | sed 's/\(^[0-9]*\).*/\1/')
</code></pre>

<p>}</p>

<p>sendMessage(){</p>

<pre><code>TO=$1
MESSAGE=`echo -n "$COMPUTER ditto is done." | perl -pe's/([^-_.~A-Za-z0-9])/sprintf("%%%02X", ord($1))/seg'`
appTokenID="&lt; hiding this &gt;"
curl "http://api.tropo.com/1.0/sessions?action=create&amp;token=${appTokenID}&amp;numberToMessage=${TO}&amp;messageToSend=${MESSAGE}&amp;messageType=SMS" &gt; /dev/null 2&gt;&amp;1  
</code></pre>

<p>}</p>

<p>SOURCE=$1
DESTINATION=$2
DIALOG=$3
PHONE=$4</p>

<p>COMPUTER=$(scutil &mdash;get LocalHostName)</p>

<p>SCOUNT=$(count $SOURCE)
SSIZE=$(size $SOURCE)</p>

<p>ditto &mdash;nocache ${SOURCE} ${DESTINATION} &amp;</p>

<p>DITTO_ID=$!</p>

<p>trap &ldquo;kill $DITTO_ID 2> /dev/null&rdquo; EXIT</p>

<p>while kill -0 $DITTO_ID 2> /dev/null; do</p>

<pre><code>DCOUNT=$(count $DESTINATION)
DSIZE=$(size $DESTINATION)
PERCENT=$(bc &lt;&lt;&lt; "scale = 2; (($DSIZE/$SSIZE) * 100)" | cut -d "." -f 1)
echo "$PERCENT $PERCENT%: $DCOUNT of $SCOUNT files copied."
</code></pre>

<p>done > >(${DIALOG}/Contents/MacOS/CocoaDialog progressbar &mdash;stoppable &mdash;title &ldquo;Treble&rdquo;)</p>

<p>trap &ndash; EXIT</p>

<p>sendMessage $PHONE</p>

<p>${DIALOG}/Contents/MacOS/CocoaDialog msgbox &mdash;title Treble &mdash;text &ldquo;Copy Complete!&rdquo; &mdash;informative-text &ldquo;$DCOUNT of $SCOUNT files copied.&rdquo; &mdash;button1 &ldquo;OK&rdquo;</p>

<p>exit 0
```</p>
]]></content>
  </entry>
  
</feed>
